# o(n) time and space where n is set created for space and n is length of iterations of string

class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        # create set to detect duplicates and then set result  variableand left pointer
        charSet = set()
        l = 0
        res = 0
        
        # loops through len of (s) times non last number inclusive
        for r in range(len(s)):
            # while tht character is in the set, we pop it off the set and move left pointer until the subarray is all distinct
            while s[r] in charSet:
                charSet.remove(s[l])
                l += 1
            # else at current iteration we add that character to the set and then calculate the max
            # by taking max of current res or right - left + 1. This calculation gives us the length of the substring and we add 1 due to
            # zero indexing
            charSet.add(s[r])
            res = max(res, (r -l) + 1)
        return res

# https://pythontutor.com/render.html#code=class%20Solution%28object%29%3A%0A%20%20%20%20def%20lengthOfLongestSubstring%28self,%20s%29%3A%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20%3Atype%20s%3A%20str%0A%20%20%20%20%20%20%20%20%3Artype%3A%20int%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20charSet%20%3D%20set%28%29%0A%20%20%20%20%20%20%20%20l%20%3D%200%0A%20%20%20%20%20%20%20%20res%20%3D%200%0A%0A%20%20%20%20%20%20%20%20for%20r%20in%20range%28len%28s%29%29%3A%0A%20%20%20%20%20%20%20%20%20%20while%20s%5Br%5D%20in%20charSet%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20charSet.remove%28s%5Bl%5D%29%0A%20%20%20%20%20%20%20%20%20%20%20%20l%20%2B%3D%201%0A%20%20%20%20%20%20%20%20%20%20charSet.add%28s%5Br%5D%29%0A%20%20%20%20%20%20%20%20%20%20res%20%3D%20max%28res,%20%28r-l%29%20%2B1%29%0A%20%20%20%20%20%20%20%20return%20res%0A%0A%20%20%20%20%20%20%20%20%0Ab%20%3D%20Solution%28%29%0Ab.lengthOfLongestSubstring%28%22pwwkew%22%29&cumulative=false&curInstr=34&heapPrimitives=nevernest&mode=display&origin=opt-frontend.js&py=3&rawInputLstJSON=%5B%5D&textReferences=false
# classic sliding window technique

# Given a string s, find the length of the longest substring without repeating characters.


# Example 1:

# Input: s = "abcabcbb"
# Output: 3
# Explanation: The answer is "abc", with the length of 3.
# Example 2:

# Input: s = "bbbbb"
# Output: 1
# Explanation: The answer is "b", with the length of 1.
# Example 3:

# Input: s = "pwwkew"
# Output: 3
# Explanation: The answer is "wke", with the length of 3.
# Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
