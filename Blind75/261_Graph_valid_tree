# o(v + e) run and space where v is vertices and e is edges

def validTree(self, n, edges):
    # if empty graph then in theory it is a valid tree so return true
    if not n:
        return True

# populate an adjacency list where i is node value, and i in range n is the connected node values
# undirected graph so will have bakc and forths
    adj = {i: [] for i in range(n)}
    for n1, n2 in edges:
        adj[n1].append(n2)
        adj[n2].append(n1)

# visit set to store visited nodes
    visit = set()


# dfs function
# if current node is in visit, that means it's been visited and we return false bc we detected a cycle
    def dfs(i, prev):
        if i in visit:
            return False
            # else we can safely add to visit set
        visit.add(i)
        # for every node connected to current node, we run dfs IF THAT NOT ISNT EQUAL TO PREV
        # THIS IS TO STOP NODES FROM GOING JUST BACK AND FORTH IN NEVER ENDING LOOPS
        # LOOPS SUCH AS 0 AND 1 GOING BACK AND FORTH. A LOOP BU TNOT A CYCLE
        for j in adj[i]:
            if j == prev:
                continue
            # ELSE WE RUN DFS ON NEXT NEIGHBOR NODE IN ITERATION AND IF ITS FALSE, WE IMMEDIATELY RETURN FALSE
            if not dfs(i, prev):
                return False
        return True

# WE CAN ONLY RETURN TRUE IF ITS A VALID TREE AND THE NUMBER OF NODES = THE NUMBER OF NODES VISITED IN VISIT SET
# SO WE KNOW ITS THE SAME AND CONNECTED
    return dfs(0, -1) and n == len(visit)


# Given n nodes labeled from 0 to n - 1 and a list of undirected edges(each edge is a pair of nodes), write a function to check whether these edges make up a valid tree.

# You can assume that no duplicate edges will appear in edges. Since all edges are undirected, [0, 1] is the same as [1, 0] and thus will not appear together in edges.

# Example
# Example 1:

# Input: n = 5 edges = [[0, 1], [0, 2], [0, 3], [1, 4]]
# Output: true.
# Example 2:

# Input: n = 5 edges = [[0, 1], [1, 2], [2, 3], [1, 3], [1, 4]]
# Output: false.
