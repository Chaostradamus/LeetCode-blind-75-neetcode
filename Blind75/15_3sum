class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        res = []
        nums.sort()
        
        for i, a in enumerate(nums):
            if i > 0 and a == nums[i-1]:
                continue                
            
            l, r = i + 1, len(nums) - 1
            while l < r:
                threeSum = a + nums[l] + nums[r]
                if threeSum > 0:
                    r -= 1
                elif threeSum < 0:
                    l += 1
                else:
                    res.append([a, nums[l], nums[r]])
                    l += 1
                    while nums[l] == nums[l-1] and l < r:
                        l += 1
        return res
                

# Given an integer array nums, return all the triplets[nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

# Notice that the solution set must not contain duplicate triplets.


# Example 1:

# Input: nums = [-1, 0, 1, 2, -1, -4]
# Output: [[-1, -1, 2], [-1, 0, 1]]
# Example 2:

# Input: nums = []
# Output: []
# Example 3:

# Input: nums = [0]
# Output: []


# o(n^2) time because of the next loops and checks o(1) or N space depending on library because sorting takes space on some languages
# set result list array and sort nums
# for i and a in enumerate nums
# if i isnt first item and is same as previous ith index value then skip and continue
# make l and right pointers where l is one ahead of i and r is at the end
# add a l and r to get 3sum and while l and r pointers in bounds, l less than r
# check if 3sum is less than or greater than 0, if less than move l if greater move r -1
# else if its a 0 then append a l and r to result
# increase L by 1 and check if its in bounds AND not the same as previous, if it is move L one more time
# return result list