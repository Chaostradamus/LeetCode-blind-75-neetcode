# o(n) time and space

class Solution:
    def topKFrequent(self, nums: List[int], k: int) -> List[int]:
        # count hashmap
        # freq array  of lists
        count = {}
        freq = [[] for i in range(len(nums) + 1)]
        
        # populate count hashmap with key as value and value as occurences
        for n in nums:
            count[n] = 1 + count.get(n, 0)
#  iterate through hashmap by key and value as number and count
# populate freq array with index as occurences of number and append value to index
# if 1 occurs 3 times, index at 3 will append 1
        for n, c in count.items():
            freq[c].append(n)
            # result array to return
        res = []
        # iterate i backwards in descending order 
        # if there is a value at ith spot in freq, then append value to result
        # once result is as long as k, return res
        # wont have duplicates cause problem said its unique answers only
        for i in range(len(freq) -1, 0, -1):
            for n in freq[i]:
                res.append(n)
                if len(res) == k:
                    return res


# Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.


# Example 1:

# Input: nums = [1, 1, 1, 2, 2, 3], k = 2
# Output: [1, 2]
# Example 2:

# Input: nums = [1], k = 1
# Output: [1]


# Constraints:

# 1 <= nums.length <= 105
# k is in the range[1, the number of unique elements in the array].
# It is guaranteed that the answer is unique.
