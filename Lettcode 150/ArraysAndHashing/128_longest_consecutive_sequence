# o(n) time and space

class Solution:
    def longestConsecutive(self, nums: List[int]) -> int:
        # convert nums to a set for o(1) lookup 
        # set longest to 0 initially
        numSet = set(nums)
        longest = 0
        
        for n in nums:
            # iterate through nums
            # if n-1 isnt in numset, that means its a starting point
            # made mistake of doing IN NUMSET VS NOT IN NUMSET
            # in numset eans we'll be checking for a previous, but not starting from the beginning of a sequence
            # if its not in numset then we know its a starting value
            # set length to 1 and ad it to N, while that number is in numSet increase length each iteration
            # set longest to max of newest length or current length
            # return longest at end
            if (n-1) not in numSet:
                length = 1
                while(n+ length) in numSet:
                    length +=1
                longest = max (length, longest)
                
        return longest
                

# Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.

# You must write an algorithm that runs in O(n) time.


# Example 1:

# Input: nums = [100, 4, 200, 1, 3, 2]
# Output: 4
# Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.
# Example 2:

# Input: nums = [0, 3, 7, 2, 5, 8, 4, 6, 0, 1]
# Output: 9

                
       