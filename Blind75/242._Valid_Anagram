class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        if len(s) != len(t):
            return False
        
        countS, countT = {}, {}
        
        for i in range(len(s)):
            countS[s[i]] = 1 + countS.get(s[i], 0)
            countT[t[i]] = 1 + countT.get(t[i], 0)
        for c in countS:
            if countS[c] != countT.get(c, 0):
                return False
        
        return True

Given two strings s and t, return true if t is an anagram of s, and false otherwise.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

 

Example 1:

Input: s = "anagram", t = "nagaram"
Output: true
Example 2:

Input: s = "rat", t = "car"
Output: false

explanation
loop through S amount of times and add each character into hashmaps
in python use .get to get the key if it doesnt exist yet with default value of 0
interate through each hashmap by key s[c] and if not equal then return false
in python use .get here to get key with default value of 0 so it doesnt throw an indexing error
will be o(s + t) where s and t are length of string and space will be same
can do better in space if you sort and compare but that will add time 