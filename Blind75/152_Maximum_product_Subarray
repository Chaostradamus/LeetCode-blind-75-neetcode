class Solution:
    def maxProduct(self, nums: List[int]) -> int:
        res = max(nums)
        curMin, curMax = 1, 1
        
        for n in nums:
            tmp = curMax * n
            curMax = max(n, curMax * n,  n * curMin)
            curMin = min(n, tmp,  n * curMin)
            res = max(res, curMax)
        return res


# Given an integer array nums, find a contiguous non-empty subarray within the array that has the largest product, and return the product.

# The test cases are generated so that the answer will fit in a 32-bit integer.

# A subarray is a contiguous subsequence of the array.

 

# Example 1:

# Input: nums = [2,3,-2,4]
# Output: 6
# Explanation: [2,3] has the largest product 6.
# Example 2:

# Input: nums = [-2,0,-1]
# Output: 0
# Explanation: The result cannot be 2, because [-2,-1] is not a subarray.


# o(n) time and space because only created single variable
# keep a max and min
# loop through n of nums
# keep a temp variable to hold the curmax because itll be computed and changed before curmin gets to run
# curmax = max of n * cur min, max, or itself
# curmin is temp, n * min, or n
# then res is max of result or current max
# return result
# point is to keep current min and max in case there are negatives. it will swap min and max and so on
# other base case is 0..it will reset min max to 0 and go on with the rest of the nums array