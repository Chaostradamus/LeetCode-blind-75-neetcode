# o(26 * n) without maxf and o(n) with
# space is o(n) cause of hashmap
class Solution:
    def characterReplacement(self, s: str, k: int) -> int:
        # make left pointer res and maxf variable and hashmap

        count = {}
        res = 0
        l = 0
        maxF = 0
        
        # loop through len of s times
        for r in range(len(s)):
            # for each s[r] increase count by 1 and here we immediately check if newly added character is biggest frequency in hashmap
            count[s[r]] = 1 + count.get(s[r], 0)
            maxF = max(maxF, count[s[r]])
            
            # if window size - maxF is greater than K
            # we slide window L pointer and decrease left pointer value in hashmap by 1
            # wont really do this until window is is maxed out in size + k, wont have to slide until then
            if (r - l + 1)- maxF > k:
                count[s[l]] -= 1
                l+= 1
                
                # keep result as max of window size or current
            res = max(res, r - l +1)
        return res

# non maxf solution with constant lookup of greatest value
    # in above solution we know the maxfrequency and keep sliding the window based off that vs constantly checking with current max
# https://pythontutor.com/render.html#code=class%20Solution%3A%0A%20%20%20%20def%20characterReplacement%28self,%20s%3A%20str,%20k%3A%20int%29%20-%3E%20int%3A%20%20%20%20%20%20%20%20%0A%0A%20%20%20%20%20%20%20%20count%20%3D%20%7B%7D%0A%20%20%20%20%20%20%20%20res%20%3D%200%0A%20%20%20%20%20%20%20%20l%20%3D%200%0A%20%20%20%20%20%20%20%20maxF%20%3D%200%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20for%20r%20in%20range%28len%28s%29%29%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20count%5Bs%5Br%5D%5D%20%3D%201%20%2B%20count.get%28s%5Br%5D,%200%29%0A%20%20%20%20%20%20%20%20%20%20%20%20maxF%20%3D%20max%28maxF,%20count%5Bs%5Br%5D%5D%29%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20%28r%20-%20l%20%2B%201%29-%20maxF%20%3E%20k%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20count%5Bs%5Bl%5D%5D%20-%3D%201%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20l%2B%3D%201%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20res%20%3D%20max%28res,%20r%20-%20l%20%2B1%29%0A%20%20%20%20%20%20%20%20return%20res%0A%0A%20%20%20%20%20%20%20%20%0Ab%20%3D%20Solution%28%29%0Ab.characterReplacement%28%22ababb%22,%202%29&cumulative=false&curInstr=35&heapPrimitives=nevernest&mode=display&origin=opt-frontend.js&py=3&rawInputLstJSON=%5B%5D&textReferences=false

# You are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times.

# Return the length of the longest substring containing the same letter you can get after performing the above operations.


# Example 1:

# Input: s = "ABAB", k = 2
# Output: 4
# Explanation: Replace the two 'A's with two 'B's or vice versa.
# Example 2:

# Input: s = "AABABBA", k = 1
# Output: 4
# Explanation: Replace the one 'A' in the middle with 'B' and form "AABBBBA".
# The substring "BBBB" has the longest repeating letters, which is 4.
