class Solution:
    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        res = []
        
        def dfs(i, cur, total):
            if total == target:
                res.append(cur.copy())
                return
            if i >= len(candidates) or total > target:
                return
            
            cur.append(candidates[i])
            dfs(i, cur, total + candidates[i])
            cur.pop()
            dfs(i +1, cur, total)
            
        dfs(0, [], 0)
        return res


# Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.

# The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.

# It is guaranteed that the number of unique combinations that sum up to target is less than 150 combinations for the given input.


# Example 1:

# Input: candidates = [2, 3, 6, 7], target = 7
# Output: [[2, 2, 3], [7]]
# Explanation:
# 2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.
# 7 is a candidate, and 7 = 7.
# These are the only two combinations.
# Example 2:

# Input: candidates = [2, 3, 5], target = 8
# Output: [[2, 2, 2, 2], [2, 3, 3], [3, 5]]
# Example 3:

# Input: candidates = [2], target = 1
# Output: []


# o(2^t) where 2 is number of decisions per T which is target value
# set global res []
# definse dfs function that takes in i pointer , cur [], and current total
#   in dfs, check if total == target, if so append to res a copy becaus eyou cant to keep working on it, and then return to exit that call
#   next check would be if i is in bounds or if total is over the target, if thats the case then treturn out also
#   append candidate at ith index and call dfs with current index, cur [], and total plus the value of i at that index
#       this is a decision to keep adding that candidate
#   once those return we pop it from cur and call dfs on i + 1 , cur [], and total 
    # this is the decision to not take value candidate at ith index 

# call dfs on i of 0th index, pass in empty cur array, and pass in total of zero
# return result array

#  notes...evertim ei wored through the problem i got duplicates
