class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        res = [1] * len(nums)
        
        
        prefix =1
        for i in range(len(nums)):
            res[i] = prefix
            prefix *= nums[i]
        postfix = 1
        for i in range(len(nums) - 1, -1, -1):
            res[i] *= postfix
            postfix *= nums[i]
        return res


# Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

# The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

# You must write an algorithm that runs in O(n) time and without using the division operation.

 

# Example 1:

# Input: nums = [1,2,3,4]
# Output: [24,12,8,6]
# Example 2:

# Input: nums = [-1,1,0,-3,3]
# Output: [0,0,9,0,0]

# o(n) runtime and space technically 2n time
# set result array with all 1's to length of nums
# set prefix to one and iterate through while setting res[i] to prefix then multiplying prefix by nums  at i
# set postfix 1
# loop through result array length amount of times backwards. set i to postfix * res[i] and postfix to *= nums[i]
# return result array
# trick is to loop through once and then backwards while resetting pre and postfix to get correct numbers
# still dont relly get the problem or solution