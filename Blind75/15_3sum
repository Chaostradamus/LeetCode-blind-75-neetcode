class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        res = []
        nums.sort()
        
        for i, a in enumerate(nums):
            if i > 0 and a == nums[i-1]:
                continue                
            
            l, r = i + 1, len(nums) - 1
            while l < r:
                threeSum = a + nums[l] + nums[r]
                if threeSum > 0:
                    r -= 1
                elif threeSum < 0:
                    l += 1
                else:
                    res.append([a, nums[l], nums[r]])
                    l += 1
                    while nums[l] == nums[l-1] and l < r:
                        l += 1
        return res
# 3sum is basically sorted 2 sum with 3 pointers but one of them being static while shifting left and right depending on if the sum is greater or less than 0
# https://pythontutor.com/render.html#code=class%20Solution%3A%0A%20%20%20%20def%20threeSum%28self,%20nums%29%3A%0A%20%20%20%20%20%20%20%20res%20%3D%20%5B%5D%0A%20%20%20%20%20%20%20%20nums.sort%28%29%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20for%20i,%20a%20in%20enumerate%28nums%29%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20i%20%3E%200%20and%20a%20%3D%3D%20nums%5Bi-1%5D%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20continue%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20l,%20r%20%3D%20i%20%2B%201,%20len%28nums%29%20-%201%0A%20%20%20%20%20%20%20%20%20%20%20%20while%20l%20%3C%20r%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20threeSum%20%3D%20a%20%2B%20nums%5Bl%5D%20%2B%20nums%5Br%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20threeSum%20%3E%200%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20r%20-%3D%201%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20elif%20threeSum%20%3C%200%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20l%20%2B%3D%201%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20else%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20res.append%28%5Ba,%20nums%5Bl%5D,%20nums%5Br%5D%5D%29%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20l%20%2B%3D%201%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20while%20nums%5Bl%5D%20%3D%3D%20nums%5Bl-1%5D%20and%20l%20%3C%20r%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20l%20%2B%3D%201%0A%20%20%20%20%20%20%20%20return%20res%0A%20%20%20%20%20%20%20%20%0Ab%20%3D%20Solution%28%29%0Ab.threeSum%28%5B-1,0,1,2,-1,-4%5D%29&cumulative=false&curInstr=42&heapPrimitives=nevernest&mode=display&origin=opt-frontend.js&py=3&rawInputLstJSON=%5B%5D&textReferences=false
# Given an integer array nums, return all the triplets[nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

# Notice that the solution set must not contain duplicate triplets.


# Example 1:

# Input: nums = [-1, 0, 1, 2, -1, -4]
# Output: [[-1, -1, 2], [-1, 0, 1]]
# Example 2:

# Input: nums = []
# Output: []
# Example 3:

# Input: nums = [0]
# Output: []


# o(n^2) time because of the next loops and checks o(1) or N space depending on library because sorting takes space on some languages
# set result list array and sort nums
# for i and a in enumerate nums
# if i isnt first item and is same as previous ith index value then skip and continue
# make l and right pointers where l is one ahead of i and r is at the end
# add a l and r to get 3sum and while l and r pointers in bounds, l less than r
# check if 3sum is less than or greater than 0, if less than move l if greater move r -1
# else if its a 0 then append a l and r to result
# increase L by 1 and check if its in bounds AND not the same as previous, if it is move L one more time
# return result list