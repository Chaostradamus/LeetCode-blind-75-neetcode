class Solution:
    def topKFrequent(self, nums: List[int], k: int) -> List[int]:
        count = {}
        freq = [[] for i in range(len(nums) + 1)]
        
        for n in nums:
            count[n] = 1 + count.get(n, 0)
        for n, c in count.items():
            freq[c].append(n)
            
        res = []
        for i in range(len(freq) -1, 0, -1):
            # descending order last index, till -, decrementing by 1
            for n in freq[i]:
                res.append(n)
                if len(res) == k:
                    return res


# Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.


# Example 1:

# Input: nums = [1, 1, 1, 2, 2, 3], k = 2
# Output: [1, 2]
# Example 2:

# Input: nums = [1], k = 1
# Output: [1]

# initialize count hashmap
# initialize freq array with buckets where buckets number is for i in range len(nums) +1
#  for each n in nums
#    update each hashmap with key as the number and value as the count
#  for each n and c where n is the number and C is the count being used as the index
#       update freq at C(index) with the n which is the value that occurs C index times
# 
# make res array to return
# 
# for i in rnge of freq array starting from the back and going in descending order
#           for every n in freq[i]...this is digging into the bucket after you arrive at the bucket
#                   append that value list to res
                        # if the length of rseult = 2 then return because they only wanted top 2 occurences

# i think adding or diggin up from empty bucket doesnt count towards the length
# o (n) run and space

# https://pythontutor.com/render.html#code=class%20Solution%28object%29%3A%0A%20%20%20%20def%20topKFrequent%28self,%20nums,%20k%29%3A%0A%20%20%20%20%20%20%20%20count%20%3D%20%7B%7D%0A%20%20%20%20%20%20%20%20freq%20%3D%20%5B%5B%5D%20for%20i%20in%20range%28len%28nums%29%20%2B%201%29%5D%0A%0A%20%20%20%20%20%20%20%20for%20n%20in%20nums%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20count%5Bn%5D%20%3D%201%20%2B%20count.get%28n,%200%29%0A%20%20%20%20%20%20%20%20for%20n,%20c%20in%20count.items%28%29%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20freq%5Bc%5D.append%28n%29%0A%0A%20%20%20%20%20%20%20%20res%20%3D%20%5B%5D%0A%20%20%20%20%20%20%20%20for%20i%20in%20range%28len%28freq%29%20-%201,%200,%20-1%29%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20for%20n%20in%20freq%5Bi%5D%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20res.append%28n%29%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20len%28res%29%20%3D%3D%20k%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20res%0A%20%20%20%20%20%20%20%20%0Aleetcode%20%3D%20Solution%28%29%0Aleetcode.topKFrequent%28%5B1,1,2,3,4,5,6,6,6%5D,%202%29&cumulative=false&curInstr=74&heapPrimitives=nevernest&mode=display&origin=opt-frontend.js&py=311&rawInputLstJSON=%5B%5D&textReferences=false
# https://pythontutor.com/render.html#code=class%20Solution%28object%29%3A%0A%20%20%20%20def%20topKFrequent%28self,%20nums,%20k%29%3A%0A%20%20%20%20%20%20%20%20count%20%3D%20%7B%7D%0A%20%20%20%20%20%20%20%20freq%20%3D%20%5B%5B%5D%20for%20i%20in%20range%28len%28nums%29%20%2B1%29%5D%0A%0A%20%20%20%20%20%20%20%20for%20n%20in%20nums%3A%0A%20%20%20%20%20%20%20%20%20%20count%5Bn%5D%20%3D%201%20%2B%20count.get%28n,%200%29%0A%20%20%20%20%20%20%20%20for%20n,%20c%20in%20count.items%28%29%3A%0A%20%20%20%20%20%20%20%20%20%20freq%5Bc%5D.append%28n%29%0A%20%20%20%20%20%20%20%20res%20%3D%20%5B%5D%0A%20%20%20%20%20%20%20%20for%20i%20in%20range%28len%28freq%29%20-1,%200%20,%20-1%29%3A%0A%20%20%20%20%20%20%20%20%20%20for%20n%20in%20freq%5Bi%5D%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20res.append%28n%29%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20len%28res%29%20%3D%3D%20k%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20res%0A%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%0Ab%20%3D%20Solution%28%29%0Ab.topKFrequent%28%5B1,2,6,6,2,6%5D,%202%29&cumulative=false&heapPrimitives=nevernest&mode=edit&origin=opt-frontend.js&py=311&rawInputLstJSON=%5B%5D&textReferences=false