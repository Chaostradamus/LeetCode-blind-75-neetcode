class Solution:
    def isValidSudoku(self, board: List[List[str]]) -> bool:
        cols = collections.defaultdict(set)
        rows = collections.defaultdict(set)
        squares = collections.defaultdict(set)  # key = (r /3, c /3)

        for r in range(9):
            for c in range(9):
                if board[r][c] == ".":
                    continue
                if (
                    board[r][c] in rows[r]
                    or board[r][c] in cols[c]
                    or board[r][c] in squares[(r // 3, c // 3)]
                ):
                    return False
                cols[c].add(board[r][c])
                rows[r].add(board[r][c])
                squares[(r // 3, c // 3)].add(board[r][c])

        return True
    
    # create 3 hashsets to keep track of each row and column and then another hashset to keep track of the current square
    # youre in by dividing r/c by 3
    # if spot youre at is blank then continue else we'll check if the digit is already in col rows or squares hashset
    # if it is then return false because its not a valid board
    # after its done checking itll be True that its a valid board


    # no backtracking just iterating and checking with 3 hashsets at each block

    https://pythontutor.com/render.html#code=import%20collections%0Aclass%20Solution%28object%29%3A%20%20%20%20%0A%20%20%20%20def%20isValidSudoku%28self,%20board%29%3A%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20%3Atype%20board%3A%20List%5BList%5Bstr%5D%5D%0A%20%20%20%20%20%20%20%20%3Artype%3A%20bool%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20cols%20%3D%20collections.defaultdict%28set%29%0A%20%20%20%20%20%20%20%20rows%20%3D%20collections.defaultdict%28set%29%0A%20%20%20%20%20%20%20%20squares%20%3D%20collections.defaultdict%28set%29%0A%0A%20%20%20%20%20%20%20%20for%20r%20in%20range%289%29%3A%0A%20%20%20%20%20%20%20%20%20%20for%20c%20in%20range%289%29%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20board%5Br%5D%5Bc%5D%20%3D%3D%20%22.%22%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20continue%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20%28board%5Br%5D%5Bc%5D%20in%20rows%5Br%5D%20or%20board%5Br%5D%5Bc%5D%20in%20cols%5Bc%5D%20or%20board%5Br%5D%5Bc%5D%20in%20squares%5B%28r%20//%203,%20c%20//%203%29%5D%29%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20False%0A%20%20%20%20%20%20%20%20%20%20%20%20cols%5Bc%5D.add%28board%5Br%5D%5Bc%5D%29%0A%20%20%20%20%20%20%20%20%20%20%20%20rows%5Br%5D.add%28board%5Br%5D%5Bc%5D%29%0A%20%20%20%20%20%20%20%20%20%20%20%20squares%5B%28r%20//%203,%20c%20//%203%29%5D.add%28board%5Br%5D%5Bc%5D%29%0A%20%20%20%20%20%20%20%20return%20True%0A%20%20%20%20%20%20%20%20%0A%0Ab%20%3D%20Solution%28%29%0Ab.isValidSudoku%28%5B%5B%225%22,%223%22,%22.%22,%22.%22,%227%22,%22.%22,%22.%22,%22.%22,%22.%22%5D%0A,%5B%226%22,%22.%22,%22.%22,%221%22,%229%22,%225%22,%22.%22,%22.%22,%22.%22%5D%0A,%5B%22.%22,%229%22,%228%22,%22.%22,%22.%22,%22.%22,%22.%22,%226%22,%22.%22%5D%0A,%5B%228%22,%22.%22,%22.%22,%22.%22,%226%22,%22.%22,%22.%22,%22.%22,%223%22%5D%0A,%5B%224%22,%22.%22,%22.%22,%228%22,%22.%22,%223%22,%22.%22,%22.%22,%221%22%5D%0A,%5B%227%22,%22.%22,%22.%22,%22.%22,%222%22,%22.%22,%22.%22,%22.%22,%226%22%5D%0A,%5B%22.%22,%226%22,%22.%22,%22.%22,%22.%22,%22.%22,%222%22,%228%22,%22.%22%5D%0A,%5B%22.%22,%22.%22,%22.%22,%224%22,%221%22,%229%22,%22.%22,%22.%22,%225%22%5D%0A,%5B%22.%22,%22.%22,%22.%22,%22.%22,%228%22,%22.%22,%22.%22,%227%22,%229%22%5D%5D%29&cumulative=false&curInstr=41&heapPrimitives=nevernest&mode=display&origin=opt-frontend.js&py=3&rawInputLstJSON=%5B%5D&textReferences=false
