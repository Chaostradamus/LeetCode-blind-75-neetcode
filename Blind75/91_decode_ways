# o(n) space and time

class Solution:
    def numDecodings(self, s: str) -> int:
        # cache store dp len(s) to 1 since there will always be 1 way
        dp = {len(s) : 1}
        for i in range(len(s) -1, -1, -1):
            # if the # is a 0 then dp[i] = 0 else it equals the initial mapping of len(s) : 1
            if s[i] == "0":
                dp[i] = 0
            else:
                dp[i] = dp[i + 1]
            
            # if index is inbounds AND it's a 1 or its a 2 and within 0-6 then you add dp[i+2] to current dp[i] index
            if (i +1 < len(s) and (s[i] == "1" or
                                  s[i] == "2" and s[i+1] in "0123456")):
                dp[i] += dp[i+2]
                # returning dp[0] will give answer like in other top down approaches
        return dp[0]


# A message containing letters from A-Z can be encoded into numbers using the following mapping:

# 'A' -> "1"
# 'B' -> "2"
# ...
# 'Z' -> "26"
# To decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above(there may be multiple ways). For example, "11106" can be mapped into:

# "AAJF" with the grouping(1 1 10 6)
# "KJF" with the grouping(11 10 6)
# Note that the grouping(1 11 06) is invalid because "06" cannot be mapped into 'F' since "6" is different from "06".

# Given a string s containing only digits, return the number of ways to decode it.

# The test cases are generated so that the answer fits in a 32-bit integer.


# Example 1:

# Input: s = "12"
# Output: 2
# Explanation: "12" could be decoded as "AB" (1 2) or "L" (12).
# Example 2:

# Input: s = "226"
# Output: 3
# Explanation: "226" could be decoded as "BZ" (2 26), "VF" (22 6), or "BBF" (2 2 6).
