class TrieNode:
    def __init__(self):
        self.children = {}
        self.word = False

class WordDictionary:
    def __init__(self):
        self.root = TrieNode()        

    def addWord(self, word: str) -> None:
        cur = self.root
        
        for c in word:
            if c not in cur.children:
                cur.children[c] = TrieNode()
            cur = cur.children[c]
        cur.word = True
        

    def search(self, word: str) -> bool:
        def dfs(j, root):
            cur = root
            
            for i in range(j, len(word)):
                c = word[i]                
                if c == ".":
                    for child in cur.children.values():
                        if dfs(i + 1, child):
                            return True
                    return False
                else:
                    if c not in cur.children:
                        return False
                    cur = cur.children[c]
            return cur.word
            
        return dfs(0, self.root)


# Your WordDictionary object will be instantiated and called as such:
# obj = WordDictionary()
# obj.addWord(word)
# param_2 = obj.search(word)


# believe it to be o(n)space and time on addword
# o(1) space because not creating anything on search and o(v + e) on search time where V is vertices and e are edges
# create trienode class tht sets a hashmet and boolean end of word value
# add is similar to trie tree. set pointer at root and iterate over each character in word. if its not the child of current root
# add it as a new trienode to root nd move pointer to it

# search
# def dfs function 
# takes in an index and a root
# set current pointer to root
# loop through len(word) amount of times
#  c is word at iteration #
# if character is a dot then for the child in current.children.values(), recursively call dfs on it increasing index by 1 and passing in child
# not too sure but i think second parameter passes in ALL children since it's a dot so itll do the dfs on every single child
# if character is not a dot, check if root's child is in the hashmap, if not return false
# else set current pointer to the children at [c]
# call dfs with 0 index and root

# have to come back to this later, was insanely stacky