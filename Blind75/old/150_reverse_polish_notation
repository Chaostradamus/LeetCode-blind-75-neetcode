class Solution(object):
    def evalRPN(self, tokens):
        """
        :type tokens: List[str]
        :rtype: int
        """
        stack = []
        for c in tokens:
          if c == "+":
            stack.append(stack.pop() + stack.pop())
          elif c == "*":
                stack.append(stack.pop() * stack.pop())
          elif c == "-":
            a, b = stack.pop(), stack.pop()
            stack.append(b -a)
          elif c == "/":
            a, b = stack.pop(), stack.pop()
            stack.append(int(float(b) / a))
          else:
            stack.append(int(c))
        return stack[0]
<!-- keep in a stack append until operation is found then pop from stack and perform the given operation -->
<!-- polish notation is just taking the numbers first and performing first operation that pops up so 2,3,+, 3, * would be -->
<!-- 2+3 then that * 3 -->

<!-- 150. Evaluate Reverse Polish Notation
Medium
Topics
Companies
You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation.

Evaluate the expression. Return an integer that represents the value of the expression.

Note that:

The valid operators are '+', '-', '*', and '/'.
Each operand may be an integer or another expression.
The division between two integers always truncates toward zero.
There will not be any division by zero.
The input represents a valid arithmetic expression in a reverse polish notation.
The answer and all the intermediate calculations can be represented in a 32-bit integer. -->