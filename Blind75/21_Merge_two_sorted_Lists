# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeTwoLists(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        dummy = ListNode()
        tail = dummy

        while l1 and l2:
            if l1.val < l2.val:
                tail.next = l1
                l1 = l1.next
            else:
                tail.next = l2
                l2 = l2.next
            tail = tail.next

        if l1:
            tail.next = l1
        if l2:
            tail.next = l2

        return dummy.next


# You are given the heads of two sorted linked lists list1 and list2.


# Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.

# Return the head of the merged linked list.
# strategy is to make a dummy node and set the pointer there (tail)
# compare l1 and l2 heads and set tails next to lesser value. move pointer on the list taken from. compare until one list reaches an end
# shift tail to tail.next regardless after every iteration
# if l1 is ended, set tail.next to l2 and vice versa
# o(n + n) time where n is number of nodes and O(n) space where n is the dummy list

RECURSIVE ANSWER

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeTwoLists(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        if l1 == None:
            return l2
        if l2 == None:
            return l1
        
        if l1.val < l2.val:
            l1.next = self.mergeTwoLists(l1.next, l2)
            return l1
     
        else:
            l2.next = self.mergeTwoLists(l1, l2.next)
            return l2
        
# first check if either list is null, will append either l1/l2 which ever is empty at the end 
# compares front of lists. if l1 is less than l2, l1.next is set to recursive call of merge(l1.next, l2) and returns l1 and vice versa
# at base case it will return one of the non empty lists and works it's way back up recursive stack
# each previous stack sets the .next and returns the l1 or l2 in that call. for example
# l1 = 1, 6       l2 = 3, 7
# base call        first call is merge(l1 = 1 ,  l2 =  3)
# CALL ONE        1 is less than 3 so l1.next with merge(l1 = 6, l2 = 3) is called
# CALL TWO      3 is less than 6 so l2.next with merge(l1 = 6, l2 = 7) is called
# call THREE       6 is less than 7 so l1.next with merge(null, l2 = 7 ) is called
# since one of the lists are null 7 is passed back up to call three
# call three sets 7 l1.next...l1 is 6 here, so 6 -> 7 and returns 6 back up to call two
# call two sets 6 as l2.next which is 3 -> 6 and returns l2 to call one which is 3
# call one sets 3 as l1.next...l1 is 1 so its 1 -> 3 and finally returns l1..the head of the newly sorted list

https://pythontutor.com/render.html#code=class%20Solution%28object%29%3A%0A%20%20%20%20def%20mergeTwoLists%28self,list1,%20list2%20%29%3A%0A%0A%20%20%20%20%20%20%20%20dummy%20%3D%20ListNode%28%29%0A%20%20%20%20%20%20%20%20tail%20%3D%20dummy%0A%0A%20%20%20%20%20%20%20%20while%20l1%20and%20l2%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20l1.val%20%3C%20l2.val%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20tail.next%20%3D%20l1%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20l1%20%3D%20l1.next%0A%20%20%20%20%20%20%20%20%20%20%20%20else%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20tail.next%20%3D%20l2%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20l2%20%3D%20l2.next%0A%20%20%20%20%20%20%20%20%20%20%20%20tail%20%3D%20tail.next%0A%20%20%20%20%20%20%20%20if%20l1%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20tail.next%20%3D%20l1%0A%20%20%20%20%20%20%20%20else%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20tail.next%20%3D%20l2%0A%20%20%20%20%20%20%20%20return%20dummy.next%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%0Ab%20%3D%20Solution%28%29%0Ab.mergeTwoLists%28list1%20%3D%20%5B1,2,4%5D,%20list2%20%3D%20%5B1,3,4%5D%0A%29&cumulative=false&curInstr=5&heapPrimitives=nevernest&mode=display&origin=opt-frontend.js&py=3&rawInputLstJSON=%5B%5D&textReferences=false
