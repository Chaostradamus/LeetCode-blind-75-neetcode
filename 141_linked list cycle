# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def hasCycle(self, head: Optional[ListNode]) -> bool:
        slow = head
        fast = head
        
        while fast and fast.next:
            fast = fast.next.next
            slow = slow.next
            if fast == slow:
                return True
        
        return False

       
       
       
#  141. Linked List Cycle


# Easy



# Given head, the head of a linked list, determine if the linked list has a cycle in it.

# There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.

# Return true if there is a cycle in the linked list. Otherwise, return false.


# Example 1:


# Input: head = [3, 2, 0, -4], pos = 1
# Output: true
# Explanation: There is a cycle in the linked list, where the tail connects to the 1st node(0-indexed).
# floyds algo tortoise and hare
#  slow and fast pointers set at head and while there is a fast and a fast.next set slow first to slow.next
# set fast to fast.next.next to move 2
# will eventually meet at same spot if there is a cycle
# o(n) time where n is length of gap between slow and fast and o(1) space because no data structures used
# there is a hashmet version where you push every node but not value into hashset and once a duplicate is met
# that means there is a cycle, otherwise it has no cycle in it