# o(nlogn) sorting through entire intervals list and then iterating through it

class Solution:
    def merge(self, intervals: List[List[int]]) -> List[List[int]]:
        # sort it with sort function through each interval(i) and sorting by i[0] which is the first value of each interval
        # example 1,3 2, 4 will sort by 1 and 2
        # create output array to  keep answer
        intervals.sort(key = lambda i : i[0])
        output = [intervals[0]]
        

        # start and end are values of the intervals
        # lastEnd is the last intervals end value
        for start, end in intervals[1:]:
            lastEnd = output[-1][1]
            

            # if the start value of current interval is less than or equal to the last end value
            # we set the last intervals end value to the max of current end and last end
            # else we append current entire interval
            # basically we check if the current interval starts before the last one ended..if so we merge them and take the biggest ending 
            # of either interval
            if start <=  lastEnd:
                output[-1][1] = max(lastEnd, end)
            else:
                output.append([start, end])
        return output
        

# Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.

 

# Example 1:

# Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
# Output: [[1,6],[8,10],[15,18]]
# Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
# Example 2:

# Input: intervals = [[1,4],[4,5]]
# Output: [[1,5]]
# Explanation: Intervals [1,4] and [4,5] are considered overlapping.