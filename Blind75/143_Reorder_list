# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reorderList(self, head: Optional[ListNode]) -> None:
        """
        Do not return anything, modify head in-place instead.
        """
        slow , fast = head, head.next
        while fast and fast.next:
                slow = slow.next
                fast = fast.next.next
        
        second = slow.next
        prev = None
        slow.next = None
        while second:
            tmp = second.next
            second.next = prev
            prev = second
            second = tmp
        
        first, second = head, prev
        while second:
            tmp1, tmp2 = first.next, second.next
            first.next = second
            second.next = tmp1
            first, second = tmp1, tmp2


# You are given the head of a singly linked-list. The list can be represented as:

# L0 → L1 → … → Ln - 1 → Ln
# Reorder the list to be on the following form:

# L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …
# You may not modify the values in the list's nodes. Only nodes themselves may be changed.

 

# Example 1:


# Input: head = [1,2,3,4]
# Output: [1,4,2,3]
# Example 2:


# Input: head = [1,2,3,4,5]
# Output: [1,5,2,4,3]

#o(n) time and constant space
#                               finding midpoint
# first we set slow and fast pointers ate head and head.next. this is to split the list into 2 parts.
# we move them fast and slow like tortoise and hare algo
# once fast is last or null we have 2 split lists

#                              reversing 2nd list
# we set first.next to null to sever the link between the lists and then work on reverse the 2nd list' order
# before we servered the list we set slow.next as second to signify beginning of second list so we can work on it
# while there is a second node we set temp as second.next to have access to it. Then we can sever the link by setting second.next to prev, which is null
# we set prev to second and shift second to temp nd repeat. this will give us a reversed second half of the list


#                                 merging lists
# while there is a second:
# now we merge both lists. we set first as original head and second to prev, which from previous work will be the end of the 2nd list
# we set tmp1 tmp2 as first.next and 2nd.next for access
# we set first.next to prev nd then prev.next to temp1
# then we reset first and second to tmp1 and tmp2 spots...moving pointers up
