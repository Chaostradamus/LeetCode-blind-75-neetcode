# constant time o(81) where 81 is number of spots and space SHOULD BE O(N)

class Solution:
    def isValidSudoku(self, board: List[List[str]]) -> bool:
        # create hashset for each row spot and col and also each subsquare
        cols = collections.defaultdict(set)
        rows = collections.defaultdict(set)
        square = collections.defaultdict(set)
        

        # iterate through board
        for r in range(9):
            for c in range(9):
                if board[r][c] == ".":
                    continue
                # if spots value is in hashset with key being the col/row number then we return false
                # for subsquare we use 2 values for key which is the row and col integer divided by 3
                # for exmaple row 1 // 3 = 0 col 1// 3 is 0 so key will be (0 ,0) and value will be added to that key
                if (board[r][c] in cols[c] or
                   board[r][c] in rows[r] or
                   board[r][c] in square[(r //3 , c//3)]):
                    return False
                    # if that row or col value isnt in row or column and square hashset, we can add it and move on
                    # not filling out sudoku, just checking if there arent any current duplicate and if sudoku is valid
                cols[c].add(board[r][c])
                rows[r].add(board[r][c])
                square[(r//3, c//3)].add(board[r][c])
        return True


# Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:

# Each row must contain the digits 1-9 without repetition.
# Each column must contain the digits 1-9 without repetition.
# Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.
# Note:

# A Sudoku board(partially filled) could be valid but is not necessarily solvable.
# Only the filled cells need to be validated according to the mentioned rules.


# Example 1:


# Input: board =
# [["5", "3", ".", ".", "7", ".", ".", ".", "."], ["6", ".", ".", "1", "9", "5", ".", ".", "."], [".", "9", "8", ".", ".", ".", ".", "6", "."], ["8", ".", ".", ".", "6", ".", ".", ".", "3"], ["4", ".", ".", "8", ".",
#                                                                                                                                                                                               "3", ".", ".", "1"], ["7", ".", ".", ".", "2", ".", ".", ".", "6"], [".", "6", ".", ".", ".", ".", "2", "8", "."], [".", ".", ".", "4", "1", "9", ".", ".", "5"], [".", ".", ".", ".", "8", ".", ".", "7", "9"]]
# Output: true
# Example 2:

# Input: board =
# [["8", "3", ".", ".", "7", ".", ".", ".", "."], ["6", ".", ".", "1", "9", "5", ".", ".", "."], [".", "9", "8", ".", ".", ".", ".", "6", "."], ["8", ".", ".", ".", "6", ".", ".", ".", "3"], ["4", ".", ".", "8", ".",
#                                                                                                                                                                                               "3", ".", ".", "1"], ["7", ".", ".", ".", "2", ".", ".", ".", "6"], [".", "6", ".", ".", ".", ".", "2", "8", "."], [".", ".", ".", "4", "1", "9", ".", ".", "5"], [".", ".", ".", ".", "8", ".", ".", "7", "9"]]
# Output: false
# Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.
