class Solution:
    def countComponents(self, n: int, edges: List[list[int]]) -> int:
        # parent array for nodes in question
        parent = [i for i in range(n)]
        
        # setting rank array to keep track of how many connections are there to parent node
        rank[i] * n
        

        # find function finds the parent of the passed in node and returns
        def find(n1):
            res = n1
            while n1 != par[res]
            par[res] = par[par[res]]
            res = par[res]
        return res
    
    # unions finds both parents and higher ranking node to parent and adds smaller to parent value in rank array
        def union(n1, n2):
            p1, p2 = find(n1), find(n2)
            
            if p1 == p2:
                return 0
            if rank[p2] > rank[p1]:
                par[p1] = par[p2]
                rank[p2] += rank[p1]
            else:
                par[p2] = p1
                rank[p1] += rank[p2]
            return 1
        
        # set result as number of nodes and we will decrease on every successful union
        # returning n will give number of connected sets 
        res = n
        for n1, n2 in edges:
            res -= union(n1, n2)
        
        return res