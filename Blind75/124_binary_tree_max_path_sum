# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def maxPathSum(self, root: Optional[TreeNode]) -> int:
        res = [root.val]
        
        def dfs(root):
            if not root:
                return 0
            
            leftMax = dfs(root.left)
            rightMax = dfs(root.right)
            leftMax = max(leftMax, 0)
            rightMax = max(rightMax, 0)
            
            res[0] = max(res[0], root.val + leftMax + rightMax)
            
            return root.val + max(leftMax, rightMax)
        
        dfs(root)
        return res[0]


# A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.

# The path sum of a path is the sum of the node's values in the path.

# Given the root of a binary tree, return the maximum path sum of any non-empty path.


# Example 1:


# Input: root = [1, 2, 3]
# Output: 6
# Explanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.

# o (n) time more precisely v + e and o(1) space because you create new res array but it will only hold one value the entire time
# set global result array that takes in root.val at first
# define dfs function
# take care of null or base cases as 0 returns if theres no root
# call dfs on left and right and set them as left and rightmaxes
# if case of negative numbers, set leftmax as max of left or 0 and set rightmax as same
# compare to res[0], take max of res[0] or root+ leftmax +rightmax
# return rootval + max(left or rightmaxes)
# call dfs on root and return res[0] at end
