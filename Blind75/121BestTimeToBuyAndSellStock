class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        l, r = 0, 1
        maxP = 0
        
        while r < len(prices):
            if prices[l] < prices[r]:
                profit = prices[r] - prices[l]
                maxP = max(maxP, profit)
            else:
                l = r
            r += 1

        return maxP

# 121. Best time to buy and sell stock

# You are given an array prices where prices[i] is the price of a given stock on the ith day.

# You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

# Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

 

# Example 1:

# Input: prices = [7,1,5,3,6,4]
# Output: 5
# Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
# Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.
# Example 2:

# Input: prices = [7,6,4,3,1]
# Output: 0
# Explanation: In this case, no transactions are done and the max profit = 0.
 
# answer
# two pointer sliding window with left set at start and right set at 1
# keep maxprofit variable to keep max profits
# while right is in bounds, compare right and left. if left less than right then subtract left from right to find profit and take max of profit vs current maxprofit
# 
# if left is greater than right, reset left to right but right pointer increases by 1 every loop to stay ahead of left
#return max profits

# 5/30

# 2 pointer solution to hold values
# left and right with right ahead of right
# keep right in bounds with while loop for bounding
#     if the price at left is less than right..find difference and keep a maxprofit..move right pointer
# else move left ro right pointer and move right up one to keep going

# o of N time but o1 space because we dont have extra space taking but you have to go through prices once
