class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        map = {}
    
        for i, n in enumerate(nums):
            diff = target - n
            if diff in map:
             return map[diff], i
            map[n] = i
            
# time  (n) upper bounded by # of items in nums 
# space o(n) created map

            
#     store difference and index in map for o(1) instant lookup for answer
#     key is that there is a guarantee of 1 answer so edge case of none is taken care of
#     example

#     nums = 2, 7, 11, 15 and target 9
    
#     2 maps to index 0
#     7 maps to index 1
#     11 maps to index 3
#     15 maps to index 4

#     if diff is in map then return map[index], and i
#      diff is first 9 - 2 = 7...map is empty so map key 2 value 0
#      diff is 2 and 2 is in map so return the map @ difference and that current iteration i
#      answer would be 2, and 1..... 2 + 7 = 9

#      because there HAS to be an answer, finding the difference will always map to the correct value and index and if stored in map already will return the two answers

# 5/30 correction
# https://pythontutor.com/render.html#code=class%20Solution%28object%29%3A%0A%20%20%20%0A%20%20%20%20%20%20def%20twoSum%28self,%20nums,%20target%29%3A%0A%20%20%20%20%20%20%20%20tmp%20%3D%20%7B%7D%0A%20%20%20%20%20%20%20%20for%20i,%20num%20in%20enumerate%28nums%29%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20diff%20%3D%20target%20-%20num%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20diff%20in%20tmp%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20%5Btmp%5Bdiff%5D,%20i%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20tmp%5Bnum%5D%20%3D%20i%0A%20%20%20%20%20%20%20%20return%20%5B-1,%20-1%5D%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%0Aleetcode%20%3D%20Solution%28%29%0Aleetcode.twoSum%28%5B2,7,11,15%5D,%209%29&cumulative=false&curInstr=14&heapPrimitives=nevernest&mode=display&origin=opt-frontend.js&py=311&rawInputLstJSON=%5B%5D&textReferences=false
