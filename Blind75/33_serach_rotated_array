class Solution(object):
    def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        l, r = 0, len(nums) - 1

        while l <= r:
          mid = (l + r) // 2
          if target == nums[mid]:
            return mid

          if nums[l] <= nums[mid]:
            if target > nums[mid] or target < nums[l]:
              l = mid + 1
            else:
              r = mid - 1
          else:
            if target < nums[mid] or target > nums[r]:
              r = mid - 1
            else:
              l = mid + 1
        return -1
        

# There is an integer array nums sorted in ascending order(with distinct values).

# Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k(1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]](0-indexed). For example, [0, 1, 2, 4, 5, 6, 7] might be rotated at pivot index 3 and become[4, 5, 6, 7, 0, 1, 2].

# Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

# You must write an algorithm with O(log n) runtime complexity.


# Example 1:

# Input: nums = [4, 5, 6, 7, 0, 1, 2], target = 0
# Output: 4
# Example 2:

# Input: nums = [4, 5, 6, 7, 0, 1, 2], target = 3
# Output: -1
# Example 3:

# Input: nums = [1], target = 0
# Output: -1


# o(logn) due to binary search and o(1) space
# same s any binary search. set l r and mid pointers
# if target = mid val then return
# if left val is less than mid val then youre in a sorted portion
#   then if target is greater than mid val or target is less than left val
#       move left val to mid plus one else move right to mid minus 1
# else if target is less than mid val or greater than right val
#   move right to mid -1
#   else move left or mid  + 1
# the if checks are too see which sorted array target is in, left or right portions and to move pointer accoringly
#  [4, 5, 6, 7, 8, 9, 0, 1, 2, 3]

#  L             M             R
# if target is 6 then first check if l to mid is sorted by checking if l is less than mid
# then check if target is either greater than mid or less than left, if so move left to other array
# in this case it's not less than left or bigger than right so we move right pointer inside left sorted array
# if target was 0 we would move left pointer to mid + 1
    
# https://pythontutor.com/render.html#code=%0Aclass%20Solution%28object%29%3A%0A%20%20%20%20%20def%20search%28self,%20nums,%20target%29%3A%0A%20%20%20%20%20%20%20%20l,%20r%20%3D%200,%20len%28nums%29%20-%201%0A%0A%20%20%20%20%20%20%20%20while%20l%20%3C%3D%20r%3A%0A%20%20%20%20%20%20%20%20%20%20mid%20%3D%20%28l%20%2B%20r%29%20//%202%0A%20%20%20%20%20%20%20%20%20%20if%20target%20%3D%3D%20nums%5Bmid%5D%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20mid%0A%0A%20%20%20%20%20%20%20%20%20%20if%20nums%5Bl%5D%20%3C%3D%20nums%5Bmid%5D%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20target%20%3E%20nums%5Bmid%5D%20or%20target%20%3C%20nums%5Bl%5D%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20l%20%3D%20mid%20%2B%201%0A%20%20%20%20%20%20%20%20%20%20%20%20else%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20r%20%3D%20mid%20-%201%0A%20%20%20%20%20%20%20%20%20%20else%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20target%20%3C%20nums%5Bmid%5D%20or%20target%20%3E%20nums%5Br%5D%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20r%20%3D%20mid%20-%201%0A%20%20%20%20%20%20%20%20%20%20%20%20else%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20l%20%3D%20mid%20%2B%201%0A%20%20%20%20%20%20%20%20return%20-1%0A%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%0Ab%20%3D%20Solution%28%29%0Ab.search%28%5B4,5,6,7,0,1,2%5D,%200%29&cumulative=false&curInstr=0&heapPrimitives=nevernest&mode=display&origin=opt-frontend.js&py=2&rawInputLstJSON=%5B%5D&textReferences=false