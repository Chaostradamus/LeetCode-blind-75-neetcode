# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeTwoLists(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        dummy = ListNode()
        tail = dummy
        
        while l1 and l2:
            if l1.val < l2.val:
                tail.next = l1
                l1 = l1.next
            else:
                tail.next = l2
                l2 = l2.next
            tail = tail.next
            
        if l1:
            tail.next = l1
        if l2:
            tail.next = l2
            
        return dummy.next    
    

# You are given the heads of two sorted linked lists list1 and list2.


# Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.

# Return the head of the merged linked list.
# strategy is to make a dummy node and set the pointer there (tail)
# compare l1 and l2 heads and set tails next to lesser value. move pointer on the list taken from. compare until one list reaches an end
# shift tail to tail.next regardless after every iteration
# if l1 is ended, set tail.next to l2 and vice versa
# o(n + n) time where n is number of nodes and O(n) space where n is the dummy list