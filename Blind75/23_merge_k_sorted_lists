# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

# o(n log K)time where n is each node and K is the number of lists halving each time for each merging
# o(n) space
 
class Solution:
    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:
# return none if there arent any lists or its empty
        if not lists or len(lists) == 0:
            return None
        
        # while lists contain more than 1 list
        # create temp mergeLists and loop through lists
        # l1 is current iteration and l2 is i+1th iteration
        # if l2 isnt there then its null
        # append margeList function call of l1 and l2 to mergedLists
    # assign that to lists so we can safely reset mergeLists without losing the merged lists
    # this will loop through lists 2 by 2 until there is only one final list of one and we return first list 
    # cause thats the only one there
        while len(lists) > 1:
            mergedLists = []            
            for i in range(0, len(lists), 2):
                l1 = lists[i]
                l2 = lists[i +1] if (i+1) < len(lists) else None
                mergedLists.append(self.mergeList(l1, l2))
            lists = mergedLists
            
        return lists[0]
    
    def mergeList(self, l1, l2):
        # mergelist function take l1 and l2 from top and creates dummy node in case one is empty
        # sets a tail pointer to dummy
        dummy = ListNode()
        tail = dummy
        
        # while there is an l1 and l2 we compare first values
        # if l1.val is less than l2.val then we srt tail.next to l1 and move l1 pointer over to next
        while l1 and l2:
            if l1.val < l2.val:
                tail.next = l1
                l1 = l1.next
                # else case that means l2 is smaller and we set tail.next to l2 and l2 pointer moves over to l2.lnext
            else:
                tail.next = l2
                l2 = l2.next
                # we then move tail to tail.next pointer each time
            tail = tail.next
            # this is for if one list is empty it will append the rest of it for either l1 or l2
        if l1:
            tail.next = l1
        if l2:
            tail.next = l2
            # we return refernce to the entire sorted list by returning dummy.next since dummy is the head  of the list
        return dummy.next


# You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.

# Merge all the linked-lists into one sorted linked-list and return it.


# Example 1:

# Input: lists = [[1, 4, 5], [1, 3, 4], [2, 6]]
# Output: [1, 1, 2, 3, 4, 4, 5, 6]
# Explanation: The linked-lists are:
# [
#     1 -> 4 -> 5,
#     1 -> 3 -> 4,
#     2 -> 6
# ]
# merging them into one sorted list:
# 1 -> 1 -> 2 -> 3 -> 4 -> 4 -> 5 -> 6
# Example 2:

# Input: lists = []
# Output: []
# Example 3:

# Input: lists = [[]]
# Output: []


1/18
# edge case of no lists 
        # while loop to keep running while lists is > 1
        # empty mergedLists 
        # loop through lists by pairs in range of 0 to len(lists)
        # l1 = list[i] ll2 = [i+1] but only if list[i+1] less than len(list) else return none
        # this is so that you check if there are pairs to merge or you can merge 1 list
        # call mergeList function on l1 and l2
        # reinitilize lists = mergeLists so we can later reset mergelists but have the values
        # return list[0]

        # mergelists function from before

        https://pythontutor.com/render.html#code=class%20Solution%28object%29%3A%0A%20%20%20%20def%20mergeKLists%28self,%20lists%29%3A%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20%3Atype%20lists%3A%20List%5BListNode%5D%0A%20%20%20%20%20%20%20%20%3Artype%3A%20ListNode%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20if%20not%20lists%20or%20len%28lists%29%20%3D%3D%200%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20None%0A%0A%20%20%20%20%20%20%20%20while%20len%28lists%29%20%3E%201%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20mergedLists%20%3D%20%5B%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20for%20i%20in%20range%280,%20len%28lists%29,%202%29%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20l1%20%3D%20lists%5Bi%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20l2%20%3D%20lists%5Bi%20%2B%201%5D%20if%20%28i%20%2B%201%29%20%3C%20len%28lists%29%20else%20None%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20mergedLists.append%28self.mergeList%28l1,%20l2%29%29%0A%20%20%20%20%20%20%20%20%20%20%20%20lists%20%3D%20mergedLists%0A%20%20%20%20%20%20%20%20return%20lists%5B0%5D%0A%0A%20%20%20%20def%20mergeList%28self,%20l1,%20l2%29%3A%0A%20%20%20%20%20%20%20%20dummy%20%3D%20ListNode%28%29%0A%20%20%20%20%20%20%20%20tail%20%3D%20dummy%0A%0A%20%20%20%20%20%20%20%20while%20l1%20and%20l2%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20l1.val%20%3C%20l2.val%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20tail.next%20%3D%20l1%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20l1%20%3D%20l1.next%0A%20%20%20%20%20%20%20%20%20%20%20%20else%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20tail.next%20%3D%20l2%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20l2%20%3D%20l2.next%0A%20%20%20%20%20%20%20%20%20%20%20%20tail%20%3D%20tail.next%0A%20%20%20%20%20%20%20%20if%20l1%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20tail.next%20%3D%20l1%0A%20%20%20%20%20%20%20%20if%20l2%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20tail.next%20%3D%20l2%0A%20%20%20%20%20%20%20%20return%20dummy.next%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0Ab%20%3D%20Solution%28%29%0Ab.mergeKLists%28%5B%5B1,4,5%5D,%5B1,3,4%5D,%5B2,6%5D%5D%29&cumulative=false&curInstr=13&heapPrimitives=nevernest&mode=display&origin=opt-frontend.js&py=311&rawInputLstJSON=%5B%5D&textReferences=false
        