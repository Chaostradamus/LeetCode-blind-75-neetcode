class Solution:
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        res = [[0 for j in range(len(text2) +1)] for i in range(len(text1) + 1)]        
                
        for i in range(len(text1) -1, -1, -1):
            for j in range(len(text2) -1, -1, -1):
                if text1[i] == text2[j]:
                    res[i][j] = 1 + res[i+1][j+1]
                else:
                    res[i][j] = max(res[i+1][j], res[i][j+1])
                    
        return res[0][0]


# Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.

# A subsequence of a string is a new string generated from the original string with some characters(can be none) deleted without changing the relative order of the remaining characters.

# For example, "ace" is a subsequence of "abcde".
# A common subsequence of two strings is a subsequence that is common to both strings.


# Example 1:

# Input: text1 = "abcde", text2 = "ace"
# Output: 3
# Explanation: The longest common subsequence is "ace" and its length is 3.
# Example 2:

# Input: text1 = "abc", text2 = "abc"
# Output: 3
# Explanation: The longest common subsequence is "abc" and its length is 3.
# Example 3:

# Input: text1 = "abc", text2 = "def"
# Output: 0
# Explanation: There is no such common subsequence, so the result is 0.


# o (n * m)  space and time where n and m are each text x each other and for space the res matrix
# make 2d matrix where j is text2 length and i is text1 + 1 lenght to have out of bounds case
# fill with all 0's to start
#  for loop through text1 from the back in descending order
#     for loop through j same way
#           if text1[i] and text2[j] are the same then res at [i][j] = 1+ at dp[1+1][j+1]
#              this is the diagonal down forward position with is initially 0
#           else res[i][j] = max of res[i+1][j] or [res][i][j+1]
                # this is essentially the max of colum next to it or row below that spot
                # this all means that at that point in text1 and text2,if there is a match, the match is the diagonal value +1 where 1 is a new match
                # else there isnt a new match so take the max of current positions up to that point which is right of or below
# at the end, the [0][0] poisiton will contain the longest subsequence with matches

# tabulation i think