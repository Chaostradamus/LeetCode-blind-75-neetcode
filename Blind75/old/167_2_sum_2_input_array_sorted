class Solution(object):
    def twoSum(self, numbers, target):
        """
        :type numbers: List[int]
        :type target: int
        :rtype: List[int]
        """
        l , r = 0, (len(numbers) -1)
        
        while l != r:
          total = numbers[l] + numbers[r]
          if total < target:
            l += 1
          if total > target:
            r -= 1
          if total == target:
            return [l +1, r +1]

# 2 pointer solution starting from front and end
# while l and r pointers are not at the same spot
        #   if the total is smaller than the target..move L pointer to increase number and vice versa
        #   return inside while loop to save do in constant space
          
#   https://pythontutor.com/render.html#code=class%20Solution%28object%29%3A%0A%20%20%20%20def%20twoSum%28self,%20numbers,%20target%29%3A%0A%20%20%20%20%20%20%20%20class%20Solution%28object%29%3A%0A%20%20%20%20def%20twoSum%28self,%20numbers,%20target%29%3A%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20%3Atype%20numbers%3A%20List%5Bint%5D%0A%20%20%20%20%20%20%20%20%3Atype%20target%3A%20int%0A%20%20%20%20%20%20%20%20%3Artype%3A%20List%5Bint%5D%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20l%20,%20r%20%3D%200,%20%28len%28numbers%29%20-1%29%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20while%20l%20!%3D%20r%3A%0A%20%20%20%20%20%20%20%20%20%20total%20%3D%20numbers%5Bl%5D%20%2B%20numbers%5Br%5D%0A%20%20%20%20%20%20%20%20%20%20if%20total%20%3C%20target%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20l%20%2B%3D%201%0A%20%20%20%20%20%20%20%20%20%20if%20total%20%3E%20target%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20r%20-%3D%201%0A%20%20%20%20%20%20%20%20%20%20if%20total%20%3D%3D%20target%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%5Bl%20%2B1,%20r%20%2B1%5D%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%0Ab%20%3D%20Solution%28%29%0Ab.twoSum%28%5B2,3,4%5D,%206%29&cumulative=false&heapPrimitives=nevernest&mode=edit&origin=opt-frontend.js&py=3&rawInputLstJSON=%5B%5D&textReferences=false
        



# Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 <= numbers.length.

# Return the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.

# The tests are generated such that there is exactly one solution. You may not use the same element twice.

# Your solution must use only constant extra space.

 

# Example 1:

# Input: numbers = [2,7,11,15], target = 9
# Output: [1,2]
# Explanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2].
# Example 2:

# Input: numbers = [2,3,4], target = 6
# Output: [1,3]
# Explanation: The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return [1, 3].
# Example 3:

# Input: numbers = [-1,0], target = -1
# Output: [1,2]
# Explanation: The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2. We return [1, 2].