# o(1) time cuse in place o(1) space because only creating rowZero variable

class Solution:
    def setZeroes(self, matrix: List[List[int]]) -> None:
        """
        Do not return anything, modify matrix in-place instead.
        """
        # hold row and col length variables and rowZero is [0][0] cell set to false
        ROWS, COLS =   len(matrix), len(matrix[0])
        rowZero = False
        
        # traverse matrix and if cell is 0 then set top most column to 0 also.. then check if row is greater than 0
        # meaning its not on its first iteration, then set that first value of that row to 0
        # else set rowZero to true
        for r in range(ROWS):
            for c in range(COLS):
                if matrix[r][c] == 0:
                    matrix[0][c] = 0
                    if r > 0:
                        matrix[r][0] = 0
                    else:
                        rowZero = True
                        

        # traverse again and if first value or the colum or rwo is 0, then we set that particular cell to 0
        # basically the above loop will mark off which rows and columns to set as zero
        for r in range(1, ROWS):
            for c in range(1, COLS):
                if matrix[0][c] == 0 or matrix[r][0] == 0:
                    matrix[r][c] = 0
                    
        # if first cell is 0 then make all rows underneath zero
        if matrix[0][0] == 0:
            for r in range(ROWS):
                matrix[r][0] = 0
                
                # if rowzsro is true then set all zeros in that row to zeros
        if rowZero:
            for c in range(COLS):
                matrix[0][c] = 0



# Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's.

# You must do it in place.

 

# Example 1:


# Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]
# Output: [[1,0,1],[0,0,0],[1,0,1]]
# Example 2:


# Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]
# Output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]