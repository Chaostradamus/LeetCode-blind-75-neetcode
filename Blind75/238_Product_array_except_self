class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        res = [1] * len(nums)
        
        
        prefix =1
        for i in range(len(nums)):
            res[i] = prefix
            prefix *= nums[i]
        postfix = 1
        for i in range(len(nums) - 1, -1, -1):
            res[i] *= postfix
            postfix *= nums[i]
        return res


# Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

# The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

# You must write an algorithm that runs in O(n) time and without using the division operation.

 

# Example 1:

# Input: nums = [1,2,3,4]
# Output: [24,12,8,6]
# Example 2:

# Input: nums = [-1,1,0,-3,3]
# Output: [0,0,9,0,0]

# o(n) runtime and space technically 2n time
# set result array with all 1's to length of nums
# set prefix to one and iterate through while setting res[i] to prefix then multiplying prefix by nums  at i
# set postfix 1
# loop through result array length amount of times backwards. set i to postfix * res[i] and postfix to *= nums[i]
# return result array
# trick is to loop through once and then backwards while resetting pre and postfix to get correct numbers
# still dont relly get the problem or solution

# updated
# https://pythontutor.com/render.html#code=class%20Solution%28object%29%3A%0A%20%20%20%20def%20productExceptSelf%28self,%20nums%29%3A%0A%20%20%20%20%20%20length%20%3D%20len%28nums%29%0A%20%20%20%20%20%20product%20%3D%20%5B1%5D%20*%20length%0A%0A%20%20%20%20%20%20for%20i%20in%20range%281,%20length%29%3A%0A%20%20%20%20%20%20%20%20product%5Bi%5D%20%3D%20product%5Bi-1%5D%20*%20nums%5Bi-1%5D%0A%0A%20%20%20%20%20%20right%20%3D%20nums%5B-1%5D%0A%20%20%20%20%20%20for%20i%20in%20range%28length%20-2,%20-1,%20-1%29%3A%0A%20%20%20%20%20%20%20%20product%5Bi%5D%20*%3D%20right%0A%20%20%20%20%20%20%20%20right%20*%3D%20nums%5Bi%5D%0A%20%20%20%20%20%20%0A%20%20%20%20%20%20return%20product%0A%20%20%20%20%20%20%20%20%0Aleetcode%20%3D%20Solution%28%29%0Aleetcode.productExceptSelf%28%5B2,%203,%204,%206%5D%29&cumulative=false&curInstr=0&heapPrimitives=nevernest&mode=display&origin=opt-frontend.js&py=311&rawInputLstJSON=%5B%5D&textReferences=false