# o(mn * 4^mn) time where mn is the board and 4^mn is the 4 dfs directions times the boards cell
# o(n) space

class TrieNode():
    # make trienode class that has children hashmap where character is mapped to value
    # prefix tree
    def __init__(self):
        self.children = {}
        self.isWord = False


# addword function that tale the word and sets a current pointer on itself and iterates through the letters to check if its in 
# it's current children or not, if not then we create it as a new trienode() and set isword to true after on the last node to set it as
# a word
    def addWord(self, word):
        cur = self
        for c in word:
            if c not in cur.children:
                cur.children[c] = TrieNode()
            cur = cur.children[c]
        cur.isWord = True
        
class Solution:
    def findWords(self, board: List[List[str]], words: List[str]) -> List[str]:
        # set root as new TrieNode()
        # iterate through all the words in the main list and addword() them
        root = TrieNode()
        for w in words:
            root.addWord(w)
            

            # set rows and cols as boundaires and res and visit sets as results set and visited celll set
        ROWS, COLS = len(board), len(board[0])
        res, visit = set(), set()
        
        # dfs function takes in row col current node and current form of word
        def dfs(r, c, node, word):
            # bounds check if its in bounds or if its in visited or not in node.children
            if(r < 0 or c < 0 or
              r == ROWS or c == COLS or
               (r,c) in visit or board[r][c] not in node.children):
               return

# if not then add current cell to visited move node from previous cell to current cell
            visit.add((r,c))
            node = node.children[board[r][c]]
            # keep word variable here and add current cell if it gets to this point
            word += board[r][c]
            # if this node is a word then add it to the res set
            if node.isWord:
                res.add(word)

# dfs calls down up right left from current cell
            dfs(r +1,c, node, word)
            dfs(r-1,c, node, word)
            dfs(r,c+1, node, word)
            dfs(r,c-1, node, word)
            # at end of dfs calls remove current cell from visited
            visit.remove((r,c))
            # iterate through m x n board and call dfs on each cell to check for words
        for r in range(ROWS):
            for c in range(COLS):
                dfs(r,c,root,'')
        return list(res)


# Given an m x n board of characters and a list of strings words, return all words on the board.

# Each word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.


# Example 1:


# Input: board = [["o", "a", "a", "n"], ["e", "t", "a", "e"], ["i", "h", "k", "r"], ["i", "f", "l", "v"]], words = ["oath", "pea", "eat", "rain"]
# Output: ["eat", "oath"]
# Example 2:


# Input: board = [["a", "b"], ["c", "d"]], words = ["abcb"]
# Output: []


# Constraints:

# m == board.length
# n == board[i].length
# 1 <= m, n <= 12
# board[i][j] is a lowercase English letter.
# 1 <= words.length <= 3 * 104
# 1 <= words[i].length <= 10
# words[i] consists of lowercase English letters.
# All the strings of words are unique.

        