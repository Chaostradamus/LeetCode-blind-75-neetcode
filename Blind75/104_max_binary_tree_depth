# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

# recursive solution

class Solution:
    def maxDepth(self, root: Optional[TreeNode]) -> int:
        if not root:
            return 0
        
        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))

# recursive method to solve
# traverse down tree with recursive call and adding 1 to max of each subtree
# will return 1 at each level and take max at each parent before return up to root
# o(n) time and space

# BFS


class Solution:
    def maxDepth(self, root: Optional[TreeNode]) -> int:
        if not root:
            return 0

        level = 0
        q = deque([root])

        while q:

            for i in range(len(q)):
                node = q.popleft()
                if node.left:
                    q.append(node.left)
                if node.right:
                    q.append(node.right)
            level += 1

        return level
# also o(n) time and space
# adding root and popping that/those to add its/their children. looping through n(children) times and increasing a level count after every finished loop

# Iterative DFS

class Solution:
    def maxDepth(self, root: Optional[TreeNode]) -> int:
        stack = [[root, 1]]
        res = 0

        while stack:
            node, depth = stack.pop()

            if node:
                res = max(res, depth)
                stack.append([node.left, depth + 1])
                stack.append([node.right, depth + 1])
        return res

# also o(n) time and space
# initialize a stack with the root and depth of 1, 2 variables
# initialize result to 0 which is the depth
# if stack takes in null root then it wont go through if loops and will return res = 0 which is the depth
# if there is a node then take the max of res and depth at every check before appending
# append children and increase depth by 1.
# every loop through will pop off parent and add children while increasing depth accordingly
# did not understand at first because order of stack popping was at different levels but since depth is kept correctly i dont think it matters
 