from typing import (
    List,
)
from lintcode import (
    Interval,
)

"""
Definition of Interval:
class Interval(object):
    def __init__(self, start, end):
        self.start = start
        self.end = end
"""

class Solution:
    """
    @param intervals: an array of meeting time intervals
    @return: if a person could attend all meetings
    """
    def can_attend_meetings(self, intervals: List[Interval]) -> bool:
        # Write your code here
# o(nlogn) run time where n is going through intervals and logN is the sorting
# similar to other intervals question
# sort intervals where i is the interval and sorted by i.start which is the objects start value
        intervals.sort(key = lambda i : 1.start)
# loop through intervals by range of 1st index to end
        for i in range(1: len(intervals)):
# starting off
# i1 is first index
# i2 is 2nd index 
            i1 = [intervals i-1]
            i2 = intervals[i]
# comparing i1's end and i2's start...if i1's end is greter than i2's start then we have an overlap and return false
# basically if the end time for first interval is beyond the start time for the 2nd, then person cannot attend both meetings

            if i1.end > i2.start:
                return false
        return True


# Description
# Given an array of meeting time intervals consisting of start and end times[[s1, e1], [s2, e2], ...](si < ei), determine if a person could attend all meetings.

# (0, 8), (8, 10) is not conflict at 8

# Example
# Example1

# Input: intervals = [(0, 30), (5, 10), (15, 20)]
# Output: false
# Explanation:
# (0, 30), (5, 10) and (0, 30), (15, 20) will conflict
# Example2

# Input: intervals = [(5, 8), (9, 15)]
# Output: true
# Explanation:
# Two times will not conflict
