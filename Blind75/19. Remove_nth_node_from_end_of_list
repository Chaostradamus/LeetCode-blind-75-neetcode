# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:
        dummy = ListNode(0, head)
        left = dummy
        right = head
        
        while n > 0 and right:
            right = right.next
            n -= 1
        
        while right:
            left = left.next
            right = right.next
            
        left.next = left.next.next
        return dummy.next    

        
        
Given the head of a linked list, remove the nth node from the end of the list and return its head.

 

Example 1:


Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]
Example 2:

Input: head = [1], n = 1
Output: []
Example 3:

Input: head = [1,2], n = 1
Output: [1]

o(n) runtime and o(1) space
create a dummy node to return from head
set left pointer to dummy and right to head
to move right n steps ahead, while loop while n > 0 down to 0 and move right to right.next n times
while loop with conditions that right is in bounds...move left and right to next...once right is null
set left to left.next.next to "delete" nth node
we set left to dummy because if we set left to head, then we will land on nth node from the end without a way to have access to previous
this way we are at previous of nth node and can just set links to after it and thus deleting it
return dummy instead of head because of edge case in case list is of size 1 and you need to return null

1/16/2023
