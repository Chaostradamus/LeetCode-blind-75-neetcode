class Solution:
    def climbStairs(self, n: int) -> int:
        one, two = 1, 1
        
        for i in range(n-1):
            temp = one
            one = one + two
            two = temp
            
        return one

        
        
        
You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

 

Example 1:

Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:

Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step

base case of last step = 1 bc only one way to reach and n - 1th step is always 1 because only can make 1 jump since 2 would put you out of bounds
similiar to fibonacci sequence in selecting last two numbers to add up to next but backwards
temp helps store one before one is calculated to help shift two on spot to what one was previously
while 1 shifts over one index and calculates new total from last 2 steps

if you set two before 1 then youll run into indexing errors where temp helps set two and two will just be set to one and youll be doing a doubling vs adding two previous numbers
