# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

# o(n) time and space unless you count recursion stack
class Codec:

    def serialize(self, root):
        # res array to hold appends
        res = []
# basic dfs function. this one is pre order so root left right
        def dfs(node):
            # if current node is null then append N in res and return out of call
            if not node:
                res.append("N")
                return
                # else we will append it as a string and then call dfs on left then right
            res.append(str(node.val))
            dfs(node.left)
            dfs(node.right)
            # call dfs on main root
        dfs(root)
        # return it as an array split by comma delimiter
        return ",".join(res)
        

    def deserialize(self, data):
        # take the aray and split it by the commas
        vals = data.split(',')
        # set global i val so its not needed to pass into function
        self.i = 0
        
        def dfs():
            # if current is an N char, we increase i and move pointer 
            if vals[self.i] =="N":
                self.i += 1
                return None
                # else we create new treenode as Node with val set as current i position val
            node = TreeNode(int(vals[self.i]))
            # increase pointer then call dfs on left then right and set as such
            self.i += 1
            node.left = dfs()
            node.right = dfs()
            # return node if we make it down the function
            return node
            # main dfs call as the return
        return dfs()
        

# Your Codec object will be instantiated and called as such:
# ser = Codec()
# deser = Codec()
# ans = deser.deserialize(ser.serialize(root))
 
        res.append(newInterval)
        return res


# You are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] represent the start and the end of the ith interval and intervals is sorted in ascending order by starti. You are also given an interval newInterval = [start, end] that represents the start and end of another interval.

# Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).

# Return intervals after the insertion.

 

# Example 1:

# Input: intervals = [[1,3],[6,9]], newInterval = [2,5]
# Output: [[1,5],[6,9]]
# Example 2:

# Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]
# Output: [[1,2],[3,10],[12,16]]
# Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].

# Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

# Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.

# Clarification: The input/output format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.


# Example 1:


# Input: root = [1, 2, 3, null, null, 4, 5]
# Output: [1, 2, 3, null, null, 4, 5]
# Example 2:

# Input: root = []
# Output: []
