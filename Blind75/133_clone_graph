"""
# Definition for a Node.
class Node:
    def __init__(self, val = 0, neighbors = None):
        self.val = val
        self.neighbors = neighbors if neighbors is not None else []
"""
# o(n) space and time 
class Solution:
    def cloneGraph(self, node: 'Node') -> 'Node':
        # create clone hasmap that maps old node to new cloned node
        clone = {}

        # function that traverse through oG nodes to create new nodes
        def dfs(node):
            # cache if that node already exists in hash then dreturn it back instead of doubling
            if node in clone:
                return clone[node]
            
            # if not then create a new node copy with current nodes.val and map the OG to the Newly created
            copy = Node(node.val)
            clone[node] = copy
            # pass in OG's niehgbors and append each on a dfs call on the neighbor
            # essentially will dfs thorugh the original graph, create clones, and append them before popping back up
            # to the original call
            for nei in node.neighbors:
                copy.neighbors.append(dfs(nei))
            return copy
            # call dfs on original root node if there is one(base case) else return null
        return dfs(node) if node else None


# Given a reference of a node in a connected undirected graph.

# Return a deep copy(clone) of the graph.

# Each node in the graph contains a value(int) and a list(List[Node]) of its neighbors.


# class Node {
#     public int val
#     public List < Node > neighbors
# }


# # Test case format:

# # For simplicity, each node's value is the same as the node's index(1-indexed). For example, the first node with val == 1, the second node with val == 2, and so on. The graph is represented in the test case using an adjacency list.

# # An adjacency list is a collection of unordered lists used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.

# # The given node will always be the first node with val = 1. You must return the copy of the given node as a reference to the cloned graph.


# # Example 1:


# # Input: adjList = [[2, 4], [1, 3], [2, 4], [1, 3]]
# # Output: [[2, 4], [1, 3], [2, 4], [1, 3]]
# # Explanation: There are 4 nodes in the graph.
# # 1st node(val=1)'s neighbors are 2nd node(val=2) and 4th node(val=4).
# # 2nd node(val=2)'s neighbors are 1st node(val=1) and 3rd node(val=3).
# # 3rd node(val=3)'s neighbors are 2nd node(val=2) and 4th node(val=4).
# # 4th node(val=4)'s neighbors are 1st node(val=1) and 3rd node(val=3).
