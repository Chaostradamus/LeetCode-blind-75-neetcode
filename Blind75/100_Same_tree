# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:
        if not p and not q:
            return True
        if not p or not q or p.val != q.val:
            return False
        
        return (self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right))


# Given the roots of two binary trees p and q, write a function to check if they are the same or not.


# Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.


# Example 1:


# Input: p = [1, 2, 3], q = [1, 2, 3]
# Output: true

# explanation
# o(n) time o(1) unless recursive stack space is counted then its o(n)?
# check initil root. if both null then technically its same tree
# after it passes first check that means only other base case is one or the other is null 
# so check if p or q is null. then check the values
# these pre checks take care of everything so just call function on both p.left, q.left AND q.right.p.right
# since we just need a true or false return  just just  return nested calls on both right and left and AND them together
# dfs search method