class Solution:
    def isPalindrome(self, s: str) -> bool:
        l = 0
        r = len(s) - 1
        
        while l < r:
            while l < r and not self.alpha(s[l]):
                l += 1
            while r > l and not self.alpha(s[r]):
                r -= 1
            if s[l].lower() != s[r].lower():
                return false
            l += 1
            r -= 1
        
        return True   
                                 
    def alpha(self, c):
        return (ord('A') <= ord(c) <= ord('Z') or
                ord('a') <= ord(c) <= ord('z') or
                ord('0') <= ord(c) <= ord('9'))



# A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.


# Given a string s, return true if it is a palindrome, or false otherwise.


# Example 1:

# Input: s = "A man, a plan, a canal: Panama"
# Output: true
# Explanation: "amanaplanacanalpanama" is a palindrome.
# Example 2:

# Input: s = "race a car"
# Output: false
# Explanation: "raceacar" is not a palindrome.
# Example 3:

# Input: s = " "
# Output: true
# Explanation: s is an empty string "" after removing non-alphanumeric characters.
# Since an empty string reads the same forward and backward, it is a palindrome.


# explanation
# in python we can create newstring and add all of S through checks of alphanumeracy and add the lowercase version of the character to new string
# after that we can compare newstr(s) with a built in function reverse of newstring newstring(::-1) and return true or false
# o(n) time but o(n) space cause of new string

# solution 2
# define own alphanumeric checker by seeing if character is between ascii values of A-Z a-z and 0-9...using ord() function
# if it is in between those ascii values then it is alphanumeric
# next initialize Left and Right pointers at the start and end of string
# while left is less than right, 2 while loops to check if l > r and r > l and calling isAlpha(s[l]) on current characters
# if they are alpha then compre if they are ==....return false if not and once algo runs it'l retrun true if it breaks out of loops
# o(n) time but o(1) space because no extra space was used

# https://pythontutor.com/render.html#code=import%20collections%0Aclass%20Solution%28object%29%3A%20%20%20%20%0A%20%20%20%20def%20isPalindrome%28self,%20s%29%3A%0A%20%20%20%20%20%20%20%20l,%20r%20%3D%200,%20len%28s%29%20-%201%0A%0A%20%20%20%20%20%20%20%20while%20l%20%3C%20r%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20while%20l%20%3C%20r%20and%20not%20self.alphaNum%28s%5Bl%5D%29%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20l%20%2B%3D%201%0A%20%20%20%20%20%20%20%20%20%20%20%20while%20r%20%3E%20l%20and%20not%20self.alphaNum%28s%5Br%5D%29%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20r%20-%3D%201%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20s%5Bl%5D.lower%28%29%20!%3D%20s%5Br%5D.lower%28%29%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20False%0A%20%20%20%20%20%20%20%20%20%20%20%20l,%20r%20%3D%20l%20%2B%201,%20r%20-%201%0A%20%20%20%20%20%20%20%20return%20True%0A%0A%0A%20%20%20%20def%20alphaNum%28self,%20c%29%3A%0A%20%20%20%20%20%20%20%20return%20%28ord%28'A'%29%20%3C%3D%20ord%28c%29%20%3C%3D%20ord%28'Z'%29%20or%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ord%28'a'%29%20%3C%3D%20ord%28c%29%20%3C%3D%20ord%28'z'%29%20or%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ord%28'0'%29%20%3C%3D%20ord%28c%29%20%3C%3D%20ord%28'9'%29%29%0A%20%20%20%20%20%20%20%20%0A%0Ab%20%3D%20Solution%28%29%0Ab.isPalindrome%28%20%22A%20man,%20a%20plan,%20a%20canal%3A%20Panama%22%29&cumulative=false&curInstr=0&heapPrimitives=nevernest&mode=display&origin=opt-frontend.js&py=3&rawInputLstJSON=%5B%5D&textReferences=false

