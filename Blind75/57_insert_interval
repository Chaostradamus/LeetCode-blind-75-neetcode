# o(n) time and space where n is going through each interval and the result array

class Solution:
    def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:
        res = []
        
        # loop through each interval
        for i in range(len(intervals)):
# if the new interval end time is less than the current intervals start time
# then we know this new interval wont interfere since it ends before the current interval even starts
# so we append newinterval to res and then append the rest of the intervals and return
            if newInterval[1] < intervals[i][0]:
                res.append(newInterval)
                return res + intervals[i:]
            
            # else if the newintervals start time begins after current interval ends
            # then there also is no interference between these two so we just append current interval we are at to res
            elif newInterval[0] > intervals[i][1]:
                res.append(intervals[i])
                # else we know there is overlap so we tke the minimum of new and current as start and max of new and current as end time
                # this will merge the two intervals together and bring this NEW newinterval to next iteration to compare again
                # we dont append right away because it may overlap more with next interations
            else:
                newInterval = [min(newInterval[0], intervals[i][0]), max(newInterval[1], intervals[i][1])]
            
            # we append after we are done iterating through the iterations
            # if we reach this without breaking out of the loops then we just append the new to the end of res and return
        res.append(newInterval)
        return res


# You are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] represent the start and the end of the ith interval and intervals is sorted in ascending order by starti. You are also given an interval newInterval = [start, end] that represents the start and end of another interval.

# Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).

# Return intervals after the insertion.

 

# Example 1:

# Input: intervals = [[1,3],[6,9]], newInterval = [2,5]
# Output: [[1,5],[6,9]]
# Example 2:

# Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]
# Output: [[1,2],[3,10],[12,16]]
# Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].