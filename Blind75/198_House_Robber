class Solution:
    def rob(self, nums: List[int]) -> int:
        rob1, rob2 = 0, 0
        
        for n in nums:
            temp = max(n + rob1, rob2)
            rob1 = rob2
            rob2 = temp
        
        return temp


You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.

Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.

 

Example 1:

Input: nums = [1,2,3,1]
Output: 4
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
Total amount you can rob = 1 + 3 = 4.
Example 2:

Input: nums = [2,7,9,3,1]
Output: 12
Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).
Total amount you can rob = 2 + 9 + 1 = 12.


Explanation

rob1 and rob2 hold positions in array
for loop through and at each N take the max of rob1(1 jump) + n  or rob2(2 jumps)
reset rob1 to rob 2 to hold max at that jump
reset rob2 to temp to hold current max value or at 2 jump value
rob1 holds current max at that point, rob2 holds current max at 1 index ahead
return rob2 but i believe returning temp also works which is what i did in my code

so basically temp holds current max, reset rob1 to rob 2 b/c its the previous max and rob2 to temp because its the current max if you jumped 2nd house instead of 1st 
 