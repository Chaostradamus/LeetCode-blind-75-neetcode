# o(n * m) time and o(n) space

class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
    # make array rows with all 1's where n is number of cols
        row = [1] * n
# loops through each row
        for i in range(m-1):
            # create new row same as above but diff name
            newRow = [1] * n
            # loop through each col except last where value is always a 1
            for j in range(n-2, -1, -1):
                # each newrow[j] = previous(newRow[j+1]) and below row[j]
                newRow[j] = newRow[j+1] + row[j]
                # set row = to newRow 
            row = newRow
            # return new rows first spot
        return row[0]

# example

# last loop newRow = [28,21,15,10,6,3,1]
# row  revalued===   [7,6,5,4,3,2,1]
# 1st loop newrow =  [7,6,5,4,3,2,1]
#  OG row =          [1,1,1,1,1,1,1]


# There is a robot on an m x n grid. The robot is initially located at the top-left corner(i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.

# Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.

# The test cases are generated so that the answer will be less than or equal to 2 * 109.


# Example 1:


# Input: m = 3, n = 7
# Output: 28
# Example 2:

# Input: m = 3, n = 2
# Output: 3
# Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
# 1. Right -> Down -> Down
# 2. Down -> Down -> Right
# 3. Down -> Right -> Down
