# same as house robber 1 but just skipping first and last index since houses are supposed to be "circular" so first and last houses
# theoretically connected
#

class Solution:
    def rob(self, nums: List[int]) -> int:
        # call helper function on nums without 1st and last index and then edge case of single item array
        return max(nums[0], self.helper(nums[1:]), self.helper(nums[:-1]))
        

    def helper(self, nums):
        # rob1 and rob2 variables
            rob1, rob2 = 0, 0
            
            # loops through n in nums and rob1 will store previous.previous and rob2 will store previous max
            # newrob will take current and add to previous.previous and cmopare to previous to see which to keep
            # rob1 will then store previous and rob2 will store current max and we move pointer
            for n in nums:
                newRob = max(rob1 +n, rob2)
                rob1 = rob2
                rob2 = newRob
            return rob2

# o(n) time and o(1) space

# You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and it will automatically contact the police if two adjacent houses were broken into on the same night.

# Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.


# Example 1:

# Input: nums = [2, 3, 2]
# Output: 3
# Explanation: You cannot rob house 1 (money=2) and then rob house 3 (money=2), because they are adjacent houses.
# Example 2:

# Input: nums = [1, 2, 3, 1]
# Output: 4
# Explanation: Rob house 1 (money=1) and then rob house 3 (money=3).
# Total amount you can rob = 1 + 3 = 4.
# Example 3:

# Input: nums = [1, 2, 3]
# Output: 3
