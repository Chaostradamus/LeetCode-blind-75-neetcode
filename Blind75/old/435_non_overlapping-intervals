# o(nlogn) because of sorting and iterating after. space is constant
class Solution:
    def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int:
# sort intervals by first index
        intervals.sort()
        # set results where it equals amount of deletions
        res = 0
        # set previousend as first intervals end
        prevEnd = intervals[0][1]
        # iterate through taking start and end values
        # if start if greater than or = to previous end, we set previous end to current end
        # this means if current inerval starts AFTER previous interval ends, we are good and we can set the new end as the new prevEnd
        # else we know start starts before last interval ends and we can delete it and set the previous end to the minimum or
        # new and old end values
        # this is to keep the intervals short so there wouldnt be as many overlaps
        for start, end in intervals[1:]:
            if start >= prevEnd:
                prevEnd = end
            else:
                res += 1
                prevEnd = min(end, prevEnd)
                
        return res






# Given an array of intervals intervals where intervals[i] = [starti, endi], return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.

 

# Example 1:

# Input: intervals = [[1,2],[2,3],[3,4],[1,3]]
# Output: 1
# Explanation: [1,3] can be removed and the rest of the intervals are non-overlapping.
# Example 2:

# Input: intervals = [[1,2],[1,2],[1,2]]
# Output: 2
# Explanation: You need to remove two [1,2] to make the rest of the intervals non-overlapping.
# Example 3:

# Input: intervals = [[1,2],[2,3]]
# Output: 0
# Explanation: You don't need to remove any of the intervals since they're already non-overlapping.