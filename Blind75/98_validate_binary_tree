# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isValidBST(self, root: Optional[TreeNode]) -> bool:
        
        def isValid(node, left, right):
            if not node:
                return True
            if not (node.val > left and node.val < right):
                return False
            
            return (isValid(node.left, left, node.val) and isValid(node.right, node.val, right))
        
        return isValid(root, float("-inf"), float('inf'))


# Given the root of a binary tree, determine if it is a valid binary search tree(BST).

# A valid BST is defined as follows:

# The left subtree of a node contains only nodes with keys less than the node's key.
# The right subtree of a node contains only nodes with keys greater than the node's key.
# Both the left and right subtrees must also be binary search trees.


# Example 1:


# Input: root = [2, 1, 3]
# Output: true


# i first just checked for root and if root was greater than left and less than right but further down the tree there may be cases
# where eft or right isnt valid with the main root like
#     5
#   3    7
#      4    8
# 4 would be less than parent but not greater than main root
# to fix this we pass down left and right parameters. first you set them to infiniity and if we go left, its upperbounded by the root
# if we go right then it is lower bounded by the root
# so at 7 we pass in (4, 5, infinity) and 4 would return false because it is not more than 5
# conversely if we go right we pass in (8, 7, infinity) so it is lowerbounded by the parent of 7
# o(n) space and time. time is more like 2n but drop constants to n