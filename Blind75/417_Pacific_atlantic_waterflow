# o(n * m) time where n is rows and m is cols o(n) space due to data structures created

class Solution:
    def pacificAtlantic(self, heights: List[List[int]]) -> List[List[int]]:
        # boundaries of rows col set to length
        ROWS, COLS = len(heights), len(heights[0])
        # sets to cache visited cells
        pac, atl = set(), set()
        

        # function to dfs grid passing in row, col, which set(ocean) and height of previous cell to see if current is eligible
        def dfs(r, c, visit, prevHeight):

            # bounds check if r and c inbounds and if current cell is greaterthaan previous, if not
            # then return  out
            
            if ((r, c) in visit or r <0 or c <0 or r ==ROWS or c == COLS or heights[r][c] < prevHeight):
                return
            # else add current cell to visited set that you passed in and keep searching down, up, right, left
            visit.add((r,c))
            dfs(r +1,c ,visit, heights[r][c])
            dfs(r -1,c ,visit, heights[r][c])
            dfs(r ,c+1 ,visit, heights[r][c])
            dfs(r ,c-1 ,visit, heights[r][c])
            
            # calls dfs by looping through cols checking top and bottom rows
        for c in range(COLS):
            dfs(0, c, pac, heights[0][c])
            dfs(ROWS -1, c, atl, heights[ROWS -1][c])
            
            # calls dfs and loops through rows nd chcking on leftmost and rightmost columns
        for r in range(ROWS):
            dfs(r, 0, pac, heights[r][0])
            dfs(r, COLS -1, atl, heights[r][COLS -1])
            
# make result list and loo through each row by columns and check if each cell is in both sets
# append to result if it is in both lists 

        res = []
        for r in range(ROWS):
            for c in range(COLS):
                if(r, c) in pac and (r,c) in atl:
                    res.append([r,c])
        return res



# There is an m x n rectangular island that borders both the Pacific Ocean and Atlantic Ocean. The Pacific Ocean touches the island's left and top edges, and the Atlantic Ocean touches the island's right and bottom edges.

# The island is partitioned into a grid of square cells. You are given an m x n integer matrix heights where heights[r][c] represents the height above sea level of the cell at coordinate (r, c).

# The island receives a lot of rain, and the rain water can flow to neighboring cells directly north, south, east, and west if the neighboring cell's height is less than or equal to the current cell's height. Water can flow from any cell adjacent to an ocean into the ocean.

# Return a 2D list of grid coordinates result where result[i] = [ri, ci] denotes that rain water can flow from cell (ri, ci) to both the Pacific and Atlantic oceans.

 

# Example 1:


# Input: heights = [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]
# Output: [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]
# Example 2:

# Input: heights = [[2,1],[1,2]]
# Output: [[0,0],[0,1],[1,0],[1,1]]