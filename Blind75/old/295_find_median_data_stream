# o(logn) on remove and insert constant time lookup of max min
# log(n) space

class MedianFinder:

    def __init__(self):
        # create small andlarge heaps where small is max heap and large is min heap
        # if small = 2, 4 and large = 6, 7
        # you will need small to be max heap to find largest for median and need min on large for median
        self.small , self.large = [], []

    def addNum(self, num: int) -> None:
        # push onto small heap but for python we multilpy by negative 1 since there is no max heap function
        heapq.heappush(self.small, -1 * num)
        
        # checks if there are populated heaps and if biggest of small is less than smallest of large
        # if tht is the case we pop the max from small(maxHeap) and add to large(minHeap) list
        if (self.small and self.large and (-1 * self.small[0]) > self.large[0]):
            val = -1 * heapq.heappop(self.small)
            heapq.heappush(self.large, val)
            
            # if the len of small is greater than large by more than 1
            # then we take the slargest from small maxheap and add to large minheap
        if len(self.small) > len(self.large) +1:
            val = -1 * heapq.heappop(self.small)
            heapq.heappush(self.large, val)

# reverse of above
# if len of large is more than 2 than len of small
# we take smallest from large(minheap) and add to small(maxheap)
        if len(self.large) > len(self.small) + 1:
            val = -1 * heapq.heappop(self.large)
            heapq.heappush(self.small, val)
            
            # find median is constant time lookups with one possible operation
            # if odd length lists we take the min or max from the larger list
            # if even then we take the min and max and divide by 2
            # be sure to multiply value by -1 from maxheap to reverse the negative when adding to maxheap
    def findMedian(self) -> float:
        if len(self.small) > len(self.large):
            return -1 * self.small[0]
        elif len(self.large) > len(self.small):
            return self.large[0]
        return (-1 *self.small[0] + self.large[0])/2

# Your MedianFinder object will be instantiated and called as such:
# obj = MedianFinder()
# obj.addNum(num)
# param_2 = obj.findMedian()


# The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value and the median is the mean of the two middle values.

# For example, for arr = [2, 3, 4], the median is 3.
# For example, for arr = [2, 3], the median is (2 + 3) / 2 = 2.5.
# Implement the MedianFinder class:

# MedianFinder() initializes the MedianFinder object.
# void addNum(int num) adds the integer num from the data stream to the data structure.
# double findMedian() returns the median of all elements so far. Answers within 10-5 of the actual answer will be accepted.


# Example 1:

# Input
# ["MedianFinder", "addNum", "addNum", "findMedian", "addNum", "findMedian"]
# [[], [1], [2], [], [3], []]
# Output
# [null, null, null, 1.5, null, 2.0]

# Explanation
# MedianFinder medianFinder = new MedianFinder()
# medianFinder.addNum(1)
# // arr = [1]
# medianFinder.addNum(2)
# // arr = [1, 2]
# medianFinder.findMedian()
# // return 1.5 (i.e., (1 + 2) / 2)
# medianFinder.addNum(3)
# // arr[1, 2, 3]
# medianFinder.findMedian()
# // return 2.0
