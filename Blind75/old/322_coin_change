class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        dp = [amount +1] * (amount + 1)
        dp[0] = 0
        
        for a in range(1, amount +1):
            for c in coins:
                if a - c >= 0:
                    dp[a] = min(dp[a], 1 + dp[a-c])
                    
        
        return dp[amount] if dp[amount] != amount + 1 else-1


# You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.

# Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.

# You may assume that you have an infinite number of each kind of coin.


# Example 1:

# Input: coins = [1, 2, 5], amount = 11
# Output: 3
# Explanation: 11 = 5 + 5 + 1
# Example 2:

# Input: coins = [2], amount = 3
# Output: -1
# Example 3:

# Input: coins = [1], amount = 0
# Output: 0


# o(amount * coinlength) time and 0(n) space

# make dp array with amount +1 at size amount +1 and then set dp array at 0th index 0
# for a in range(1 to amount +1) loop....a is amount starting at 1 since we declared dp[0] to be 0 already.
#           then for c in coins...this loops through each coin amount as a decision...
                    # if amount  - coin amount >=  this means we are in bounds
                        # dp[a] = the minimum or dp[a] or dp[a-c] + 1...this part means this current amount = its current position
                        # which is never since it'll be the amount at first or the [amount we are at - coin we chose] incdex
                        # for example at amount 3 with coin amount 2, we will take dp[1] +1 since we will add this coin and the remaining
                        # amount of coins used at of dp[a-c..like 3-2 = 1...we use this 2 coin and whatever we used at the dp[1] coin
# we return the last index since that will be the full amount IF that dp[amount] doesnt equal amount + 1...else we return -1
# i believe thi smeans we have no way to make the amount like coins[3] and amount = 4