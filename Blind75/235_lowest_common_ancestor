# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        cur = root
        
        while cur:
            if p.val and q.val > cur.val:
                cur = cur.right
            elif p.val and q.val < cur.val:
                cur = cur.left
            else:
                return cur
<!-- 
Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”

 

Example 1:


Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8
Output: 6
Explanation: The LCA of nodes 2 and 8 is 6. -->


<!-- since an answer is guaranteed, it's much easier than you think
o(log n) time and o(1) space because time gets cut in half by each level of height of tree and no extra data structures are created
set current to the root and then check if p and q are less than or equal to it. if its greater than then go right and vice versa
once it's doesnt meet the criteria where both p and q are less than/greater than, that is where they split and that would be their lowest common ancestor -->